import serial
import socket
import time
import random
import json
import ast

#IMPORTANT to run virtual serial
#socat -d -d pty, raw,echo=0 pty, raw,echo=0
#set serial in each script to on of the above outputs

trialN = 0


global s_receive, s_send, server_addrs_receive, room_addrs_send
#Intializing and setting sockets and ports
s_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
port = 1000
server_addrs_receive = ('', port)
s_receive.bind(server_addrs_receive)

s_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
room_addrs_send = ('127.0.0.1', 1010)
    
def receiver():
    global data, address
    data, address = s_receive.recvfrom(port)
        
    return data.decode()

def sender(jsonstr, addrs_send):
    s_send.sendto(jsonstr, addrs_send)
    return

def sendSocketAck(address):
    sender('{"opcode" : "0"}', address)
    return

def startWaterPump(startPump):
    global room_addrs_send
    sender(startPump, room_addrs_send)
    testReceiveAck(receiver())
    return

def testReceiveAck(buf):
    if(buf == "ack"):
        print("RECEIVED: " + buf)
        return
    else:
        #notifyUser("00000000001")
        return

ser = serial.Serial('/dev/pts/2', timeout = 0.01)


def assertJSON(expectedJSON, actualJSON, n):
    exp = json.loads(expectedJSON)
    act = json.loads(actualJSON)
    
    assert act.get('opcode') == "9"
    assert act.get('roomID') == 0
    assert act.get('potID') == 1
    assert act.get('temperature') == 55
    assert act.get('humidity') == 65
    assert act.get('DHT22Status') == 1
    assert act.get('waterDistance') == exp.get('waterDistance')
    assert act.get('light') == exp.get('light')
    assert act.get('soilMoisture') == exp.get('soilMoisture')
    
    return "\tTrial " + str(n) + " passed!"

def assertErrorArray(expectedJSON, actualArray, n):
    exp = json.loads(expectedJSON)
    assert actualArray[8] != exp.get('waterDistanceStatus')
    assert exp.get('ldrStatus') != actualArray[5]
    assert exp.get('soilMoistureStatus') != actualArray[7]
    assert exp.get('waterPumpStatus') != actualArray[9]
    
    return "\tTrial " + str(n) + " passed!"

def assertPumpMessageRec(expected, actual, n):
    assert dataToArduino[0] == expected[0]
    assert dataToArduino[1] == expected[1]
    return "\tTrial " + str(n) + " passed!"

ser.flushInput()

print("\t=====================Distributed System Testing=====================\n")
print("***************************************************************************************\n")
print("\t=====================Test 1: sendPotData=====================")
print("Description: roomPi requests potData from Arduino over serial")
ser.flushInput()
time.sleep(1)
n = 0
nSendPotData = 5
while n < nSendPotData:
    data = ser.readline()
    if(len(data) > 0):
        dataRoomPi = data.decode().strip('\r\n')
        if dataRoomPi == "E,":
            messageFromArduino = '{"opcode": 8, "potID": 1,"waterPumpStatus": 1,"waterDistance":' + str(random.randint(1,100)) + ',"waterDistanceStatus": 1,"light":' + str(random.randint(1,100)) + ',"ldrStatus": 1,"soilMoisture":' + str(random.randint(1,100)) + ',"soilMoistureStatus": 1}'
            ser.write(messageFromArduino.encode("utf-8"))
            time.sleep(0.1)
            ser.flushInput()
            dataPi = receiver()
            sendSocketAck(room_addrs_send)
            n = n + 1
            print("\tTrial " + str(n) + ": passed")
            #print(dataPi)
            #time.sleep(0.01)

print("Test 1 PASSED!")
ser.flushInput()
print("\t=====================Test 2: sendPotDataACK=====================")
print("Description: roomPi sends an ACK to arduino that the potSensor data was received over serial")

n = 0
nSendAckArduino = 5
while n < nSendAckArduino:
    data = ser.readline()
    if(len(data) > 0):
        dataRoomPi = data.decode().strip('\r\n')
        if dataRoomPi == "E,":
            messageFromArduino = '{"opcode": 8, "potID": 1,"waterPumpStatus": 1,"waterDistance":' + str(random.randint(1,100)) + ',"waterDistanceStatus": 1,"light":' + str(random.randint(1,100)) + ',"ldrStatus": 1,"soilMoisture":' + str(random.randint(1,100)) + ',"soilMoistureStatus": 1}'
            ser.write(messageFromArduino.encode("utf-8"))
            time.sleep(0.1)
            ser.flushInput()
            dataPi = receiver()
            sendSocketAck(room_addrs_send)
            ack = ser.read()
            ser.readline()
            while len(ack) < 1:
                ack = ser.readline().decode().strip('\r\n')
            assert ack == "0"
            n = n + 1
            print("\tTrial " + str(n) + " passed")
            

print("Test 2 PASSED!")

print("\t=====================Test 3=====================")
print("Description: roomPi sends all the sensory data over UDP to the globalServer")
n = 0
nSendAllSensorData = 5
ser.readline()
while n < nSendAllSensorData:
    data = ser.readline()
    if(len(data) > 0):
        dataRoomPi = data.decode().strip('\r\n')
        if dataRoomPi == "E,":
            messageFromArduino = '{"opcode": 8, "potID": 1,"waterPumpStatus": 1,"waterDistance":' + str(random.randint(1,100)) + ',"waterDistanceStatus": 1,"light":' + str(random.randint(1,100)) + ',"ldrStatus": 1,"soilMoisture":' + str(random.randint(1,100)) + ',"soilMoistureStatus": 1}'
            ser.write(messageFromArduino.encode("utf-8"))
            time.sleep(0.1)
            dataPi = receiver()
            sendSocketAck(room_addrs_send)
            n = n + 1
            sucssesMessage = assertJSON(messageFromArduino, dataPi, n)
            print(sucssesMessage)
            time.sleep(0.01)


print("Test 3 PASSED!")

print("\t=====================Test 4=====================")
print("Description: globalServer makes a request to the roomPi to turn on\nthe water pump and the roomPi passes the request to the arduino")
ser.flushInput()
time.sleep(1)
nStartWaterPump = 5
n = 0
while n < nStartWaterPump:
    pumpDuration = str(random.randint(1,10))
    startPumpStr = '{"opcode" : "4", "pumpDuration" : "' + pumpDuration + '"}'
    startWaterPump(startPumpStr) #sends to room pi receives ack
    data = ser.readline()
    
    if(len(data) > 0):
        n = n +1
        dataToArduino = data.decode().strip('\r\n')
        dataToArduino = dataToArduino.split(",")
        succssesMessage = assertPumpMessageRec(["C", pumpDuration], dataToArduino, n)
        print(succssesMessage)

print("Test 4 PASSED!")

print("\t=====================Test 5=====================")
print("Description: Arduino's errors has sensors and the roomPi forwards this to the globalServer")
ser.flushInput()
time.sleep(1)
nErrorDetectedArduino = 5
n = 0
while n < nErrorDetectedArduino:
    data = ser.readline()
    if(len(data) > 0):
        dataRoomPi = data.decode().strip('\r\n')
        if dataRoomPi == "E,":
            messageFromArduino = '{"opcode": 8, "potID": 1,"waterPumpStatus":' + str(random.randint(0,1)) + ',"waterDistance":' + str(random.randint(1,100)) + ',"waterDistanceStatus":' + str(random.randint(0,1)) + ',"light":' + str(random.randint(1,100)) + ',"ldrStatus":' + str(random.randint(0,1)) + ',"soilMoisture":' + str(random.randint(1,100)) + ',"soilMoistureStatus":0}'
            ser.write(messageFromArduino.encode("utf-8"))
            time.sleep(0.1)
            n = n + 1
            dataPiError = receiver()
            sendSocketAck(room_addrs_send)
            sucssesMessage = assertErrorArray(messageFromArduino, map(int, str(dataPiError)), n)
            print(sucssesMessage)
            time.sleep(0.1)
            dataPi = receiver()
            sendSocketAck(room_addrs_send)
            assertJSON(messageFromArduino, dataPi, n)
            time.sleep(0.01)

print("Test 5 PASSED!")


